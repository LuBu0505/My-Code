{"id":"node_modules/@azure/core-http/es/src/operationSpec.js","dependencies":[{"name":"C:\\LBWorkSpace\\Stroage\\blob-quickstart-v12\\BlobQuickstartV12\\node_modules\\@azure\\core-http\\es\\src\\operationSpec.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\LBWorkSpace\\Stroage\\blob-quickstart-v12\\BlobQuickstartV12\\package.json","includedInParent":true,"mtime":1605861829311},{"name":"C:\\LBWorkSpace\\Stroage\\blob-quickstart-v12\\BlobQuickstartV12\\node_modules\\@azure\\core-http\\package.json","includedInParent":true,"mtime":1605861484137},{"name":"./serializer","loc":{"line":3,"column":27},"parent":"C:\\LBWorkSpace\\Stroage\\blob-quickstart-v12\\BlobQuickstartV12\\node_modules\\@azure\\core-http\\es\\src\\operationSpec.js","resolved":"C:\\LBWorkSpace\\Stroage\\blob-quickstart-v12\\BlobQuickstartV12\\node_modules\\@azure\\core-http\\es\\src\\serializer.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isStreamOperation = isStreamOperation;\n\nvar _serializer = require(\"./serializer\");\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction isStreamOperation(operationSpec) {\n  var result = false;\n\n  for (var statusCode in operationSpec.responses) {\n    var operationResponse = operationSpec.responses[statusCode];\n\n    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === _serializer.MapperType.Stream) {\n      result = true;\n      break;\n    }\n  }\n\n  return result;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/operationSpec.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":11,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":98,"column":6},"generated":{"line":12,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":98,"column":16},"generated":{"line":12,"column":9}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":98,"column":6},"generated":{"line":12,"column":26}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":98,"column":34},"generated":{"line":12,"column":27}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":98,"column":6},"generated":{"line":12,"column":40}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":98,"column":62},"generated":{"line":12,"column":42}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":99,"column":2},"generated":{"line":13,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":99,"column":6},"generated":{"line":13,"column":6}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":99,"column":12},"generated":{"line":13,"column":12}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":99,"column":15},"generated":{"line":13,"column":15}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":99,"column":2},"generated":{"line":13,"column":20}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":2},"generated":{"line":15,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":7},"generated":{"line":15,"column":7}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":13},"generated":{"line":15,"column":11}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":2},"generated":{"line":15,"column":21}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":27},"generated":{"line":15,"column":25}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":40},"generated":{"line":15,"column":38}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":41},"generated":{"line":15,"column":39}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":2},"generated":{"line":15,"column":48}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":100,"column":52},"generated":{"line":15,"column":50}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":4},"generated":{"line":16,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":10},"generated":{"line":16,"column":8}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":27},"generated":{"line":16,"column":25}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":49},"generated":{"line":16,"column":28}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":62},"generated":{"line":16,"column":41}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":63},"generated":{"line":16,"column":42}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":49},"generated":{"line":16,"column":51}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":73},"generated":{"line":16,"column":52}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":49},"generated":{"line":16,"column":62}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":101,"column":4},"generated":{"line":16,"column":63}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":102,"column":4},"generated":{"line":18,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":6},"generated":{"line":18,"column":8}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":23},"generated":{"line":18,"column":25}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":24},"generated":{"line":18,"column":26}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":103,"column":6},"generated":{"line":18,"column":36}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":6},"generated":{"line":18,"column":40}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":23},"generated":{"line":18,"column":57}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":24},"generated":{"line":18,"column":58}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":6},"generated":{"line":18,"column":68}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":35},"generated":{"line":18,"column":69}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":6},"generated":{"line":18,"column":73}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":40},"generated":{"line":18,"column":74}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":6},"generated":{"line":18,"column":78}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":49},"generated":{"line":18,"column":83}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":104,"column":60},"generated":{"line":18,"column":106}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":102,"column":4},"generated":{"line":18,"column":112}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":105,"column":6},"generated":{"line":18,"column":114}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":19,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":19,"column":6}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":106,"column":12},"generated":{"line":19,"column":12}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":106,"column":15},"generated":{"line":19,"column":15}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":19,"column":19}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":107,"column":6},"generated":{"line":20,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":108,"column":5},"generated":{"line":21,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":109,"column":3},"generated":{"line":22,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":2},"generated":{"line":24,"column":0}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":9},"generated":{"line":24,"column":9}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":110,"column":2},"generated":{"line":24,"column":15}},{"source":"../../src/operationSpec.ts","name":null,"original":{"line":111,"column":1},"generated":{"line":25,"column":0}}],"sources":{"../../src/operationSpec.ts":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  OperationParameter,\n  OperationQueryParameter,\n  OperationURLParameter\n} from \"./operationParameter\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { MapperType, Serializer } from \"./serializer\";\nimport { HttpMethods } from \"./webResource\";\n\n/**\n * A specification that defines an operation.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The media type of the request body.\n   * This value can be used to aide in serialization if it is provided.\n   */\n  readonly mediaType?:\n    | \"json\"\n    | \"xml\"\n    | \"form\"\n    | \"binary\"\n    | \"multipart\"\n    | \"text\"\n    | \"unknown\"\n    | string;\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponse };\n}\n\nexport function isStreamOperation(operationSpec: OperationSpec): boolean {\n  let result = false;\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse: OperationResponse = operationSpec.responses[statusCode];\n    if (\n      operationResponse.bodyMapper &&\n      operationResponse.bodyMapper.type.name === MapperType.Stream\n    ) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n"},"lineCount":null}},"error":null,"hash":"deaf60dddd5db30770d9d9b009d2abb5","cacheData":{"env":{}}}